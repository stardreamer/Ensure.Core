<?xml version="1.0" encoding="utf-8"?>
<assemblies timestamp="10/21/2017 22:00:41">
  <assembly name="Ensure.Core.Ensure.Tests.dll" environment="64-bit .NET Standard [collection-per-class, parallel (16 threads)]" test-framework="xUnit.net 2.3.0.3820" run-date="2017-10-21" run-time="22:00:41" total="215" passed="215" failed="0" skipped="0" time="0.176" errors="0">
    <errors />
    <collection total="9" passed="9" failed="0" skipped="0" name="Test collection for Ensure.Core.Ensure.Tests.EnsureFileTests" time="0.018">
      <test name="Ensure.Core.Ensure.Tests.EnsureFileTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsEmpty(filePath: \&quot;../../../files/nonemptyfile.txt\&quot;)" type="Ensure.Core.Ensure.Tests.EnsureFileTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsEmpty" time="0.0105526" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureFileTests.ShouldWorkWhenGoodValueIsPassedToDoesNotContainBlankLines(filePath: \&quot;../../../files/filewithoutblanklines.txt\&quot;)" type="Ensure.Core.Ensure.Tests.EnsureFileTests" method="ShouldWorkWhenGoodValueIsPassedToDoesNotContainBlankLines" time="0.0019352" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureFileTests.ShouldWorkWhenGoodValueIsPassedToIsNotEmpty(filePath: \&quot;../../../files/nonemptyfile.txt\&quot;)" type="Ensure.Core.Ensure.Tests.EnsureFileTests" method="ShouldWorkWhenGoodValueIsPassedToIsNotEmpty" time="0.0012031" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureFileTests.ShouldAlwaysWork" type="Ensure.Core.Ensure.Tests.EnsureFileTests" method="ShouldAlwaysWork" time="0.0001475" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureFileTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNotEmpty(filePath: \&quot;../../../files/emptyfile.txt\&quot;)" type="Ensure.Core.Ensure.Tests.EnsureFileTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNotEmpty" time="0.0008482" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureFileTests.ShouldWorkWhenGoodValueIsPassedToIsEmpty(filePath: \&quot;../../../files/emptyfile.txt\&quot;)" type="Ensure.Core.Ensure.Tests.EnsureFileTests" method="ShouldWorkWhenGoodValueIsPassedToIsEmpty" time="0.0005022" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureFileTests.ShouldWorkWhenGoodValueIsPassedToExists(filePath: \&quot;../../../files/nonemptyfile.txt\&quot;)" type="Ensure.Core.Ensure.Tests.EnsureFileTests" method="ShouldWorkWhenGoodValueIsPassedToExists" time="0.0012456" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureFileTests.ShouldThrowExceptionWhenWrongValueWasPassedToDoesNotContainBlankLines(filePath: \&quot;../../../files/filewithblanklines.txt\&quot;)" type="Ensure.Core.Ensure.Tests.EnsureFileTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToDoesNotContainBlankLines" time="0.0006547" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureFileTests.ShouldThrowExceptionWhenWrongValueWasPassedToExists(filePath: \&quot;../../../files/nonexisting.txt\&quot;)" type="Ensure.Core.Ensure.Tests.EnsureFileTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToExists" time="0.0009524" result="Pass" />
    </collection>
    <collection total="42" passed="42" failed="0" skipped="0" name="Test collection for Ensure.Core.Ensure.Tests.EnsureColletionTests" time="0.041">
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldThrowExceptionWhenColletionsAreNotCoherent&lt;Int32&gt;(col: [12, 555], colSource: [12, 13, 214])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldThrowExceptionWhenColletionsAreNotCoherent" time="0.0105759" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldThrowExceptionWhenColletionsAreNotCoherent&lt;Int32&gt;(col: [12, 13, 214, 17], colSource: [12, 13, 214, 545])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldThrowExceptionWhenColletionsAreNotCoherent" time="0.0001077" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldThrowExceptionWhenColletionsAreNotCoherent&lt;Single&gt;(col: [23,5, 23,6, 0], colSource: [23,5, 23,6, 12])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldThrowExceptionWhenColletionsAreNotCoherent" time="0.0029231" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldThrowExceptionWhenColletionsAreNotCoherent&lt;String&gt;(col: [\&quot;12\&quot;, \&quot;13\&quot;, \&quot;mice\&quot;], colSource: [\&quot;12\&quot;, \&quot;13\&quot;, \&quot;deer\&quot;])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldThrowExceptionWhenColletionsAreNotCoherent" time="0.0027172" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldWorkWhenNonEmptyCollectionIsGivenToIsEmpty&lt;Int32&gt;(nonEmptyCollection: [])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldWorkWhenNonEmptyCollectionIsGivenToIsEmpty" time="0.0019382" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldWorkWhenNonEmptyCollectionIsGivenToIsEmpty&lt;Single&gt;(nonEmptyCollection: [])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldWorkWhenNonEmptyCollectionIsGivenToIsEmpty" time="0.0012383" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldWorkWhenNonEmptyCollectionIsGivenToIsEmpty&lt;String&gt;(nonEmptyCollection: [])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldWorkWhenNonEmptyCollectionIsGivenToIsEmpty" time="0.0012991" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldWorkWhenNonEmptyCollectionIsGivenToIsEmpty&lt;Object&gt;(nonEmptyCollection: [])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldWorkWhenNonEmptyCollectionIsGivenToIsEmpty" time="0.0002699" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldThrowExceptionWhenColletionDoesNotContainSpecifiedElement&lt;Int32&gt;(col: [12], element: 0)" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldThrowExceptionWhenColletionDoesNotContainSpecifiedElement" time="0.0011565" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldThrowExceptionWhenColletionDoesNotContainSpecifiedElement&lt;Int32&gt;(col: [12, 13, 214], element: 777)" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldThrowExceptionWhenColletionDoesNotContainSpecifiedElement" time="0.0000605" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldThrowExceptionWhenColletionDoesNotContainSpecifiedElement&lt;Single&gt;(col: [23,5, 23,6], element: 34,2)" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldThrowExceptionWhenColletionDoesNotContainSpecifiedElement" time="0.0008965" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldThrowExceptionWhenColletionDoesNotContainSpecifiedElement&lt;String&gt;(col: [\&quot;12\&quot;, \&quot;13\&quot;], element: \&quot;deer\&quot;)" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldThrowExceptionWhenColletionDoesNotContainSpecifiedElement" time="0.0010387" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldThrowExceptionWhenNonUniqueElementsCollectionIsGivenToUniqueness&lt;Int32&gt;(nonUniqueCollection: [12, 12])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldThrowExceptionWhenNonUniqueElementsCollectionIsGivenToUniqueness" time="0.0034451" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldThrowExceptionWhenNonUniqueElementsCollectionIsGivenToUniqueness&lt;Int32&gt;(nonUniqueCollection: [12, 13, 214, 13])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldThrowExceptionWhenNonUniqueElementsCollectionIsGivenToUniqueness" time="0.000058" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldThrowExceptionWhenNonUniqueElementsCollectionIsGivenToUniqueness&lt;Single&gt;(nonUniqueCollection: [23,5, 23,5])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldThrowExceptionWhenNonUniqueElementsCollectionIsGivenToUniqueness" time="0.0034129" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldThrowExceptionWhenNonUniqueElementsCollectionIsGivenToUniqueness&lt;String&gt;(nonUniqueCollection: [\&quot;12\&quot;, \&quot;12\&quot;])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldThrowExceptionWhenNonUniqueElementsCollectionIsGivenToUniqueness" time="0.0013745" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldThrowExceptionWhenNonUniqueElementsCollectionIsGivenToUniqueness&lt;Object&gt;(nonUniqueCollection: [\&quot;12\&quot;, \&quot;12\&quot;])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldThrowExceptionWhenNonUniqueElementsCollectionIsGivenToUniqueness" time="0.0002593" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldThrowExceptionWhenEmptyCollectionIsGivenToIsNotEmpty&lt;Int32&gt;(emptyCollection: [])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldThrowExceptionWhenEmptyCollectionIsGivenToIsNotEmpty" time="0.000867" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldThrowExceptionWhenEmptyCollectionIsGivenToIsNotEmpty&lt;Single&gt;(emptyCollection: [])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldThrowExceptionWhenEmptyCollectionIsGivenToIsNotEmpty" time="0.000919" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldThrowExceptionWhenEmptyCollectionIsGivenToIsNotEmpty&lt;String&gt;(emptyCollection: [])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldThrowExceptionWhenEmptyCollectionIsGivenToIsNotEmpty" time="0.0011213" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldThrowExceptionWhenEmptyCollectionIsGivenToIsNotEmpty&lt;Object&gt;(emptyCollection: [])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldThrowExceptionWhenEmptyCollectionIsGivenToIsNotEmpty" time="0.0001379" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldWorkWhenColletionsAreCoherent&lt;Int32&gt;(col: [12], colSource: [12, 13, 214])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldWorkWhenColletionsAreCoherent" time="0.0002895" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldWorkWhenColletionsAreCoherent&lt;Int32&gt;(col: [12, 13, 214], colSource: [12, 13, 214, 545])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldWorkWhenColletionsAreCoherent" time="0.0000099" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldWorkWhenColletionsAreCoherent&lt;Single&gt;(col: [23,5, 23,6], colSource: [23,5, 23,6, 12])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldWorkWhenColletionsAreCoherent" time="0.0003279" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldWorkWhenColletionsAreCoherent&lt;String&gt;(col: [\&quot;12\&quot;, \&quot;13\&quot;], colSource: [\&quot;12\&quot;, \&quot;13\&quot;, \&quot;deer\&quot;])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldWorkWhenColletionsAreCoherent" time="0.0004527" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldWorkWhenNonEmptyCollectionIsGivenToIsNotEmpty&lt;Int32&gt;(nonEmptyCollection: [12])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldWorkWhenNonEmptyCollectionIsGivenToIsNotEmpty" time="0.0003577" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldWorkWhenNonEmptyCollectionIsGivenToIsNotEmpty&lt;Single&gt;(nonEmptyCollection: [23,5])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldWorkWhenNonEmptyCollectionIsGivenToIsNotEmpty" time="0.0003133" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldWorkWhenNonEmptyCollectionIsGivenToIsNotEmpty&lt;String&gt;(nonEmptyCollection: [\&quot;12\&quot;])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldWorkWhenNonEmptyCollectionIsGivenToIsNotEmpty" time="0.0004081" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldWorkWhenNonEmptyCollectionIsGivenToIsNotEmpty&lt;Object&gt;(nonEmptyCollection: [\&quot;12\&quot;])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldWorkWhenNonEmptyCollectionIsGivenToIsNotEmpty" time="0.0000871" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldWorkWhenUniqueElementsCollectionIsGivenToUniqueness&lt;Int32&gt;(uniqueCollection: [12])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldWorkWhenUniqueElementsCollectionIsGivenToUniqueness" time="0.0002682" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldWorkWhenUniqueElementsCollectionIsGivenToUniqueness&lt;Int32&gt;(uniqueCollection: [12, 13, 214])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldWorkWhenUniqueElementsCollectionIsGivenToUniqueness" time="0.0000092" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldWorkWhenUniqueElementsCollectionIsGivenToUniqueness&lt;Single&gt;(uniqueCollection: [23,5])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldWorkWhenUniqueElementsCollectionIsGivenToUniqueness" time="0.0002732" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldWorkWhenUniqueElementsCollectionIsGivenToUniqueness&lt;String&gt;(uniqueCollection: [\&quot;12\&quot;])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldWorkWhenUniqueElementsCollectionIsGivenToUniqueness" time="0.0003866" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldWorkWhenUniqueElementsCollectionIsGivenToUniqueness&lt;Object&gt;(uniqueCollection: [\&quot;12\&quot;])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldWorkWhenUniqueElementsCollectionIsGivenToUniqueness" time="0.00007" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldWorkWhenColletionContainsSpecifiedElement&lt;Int32&gt;(col: [12], element: 12)" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldWorkWhenColletionContainsSpecifiedElement" time="0.0002854" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldWorkWhenColletionContainsSpecifiedElement&lt;Int32&gt;(col: [12, 13, 214], element: 214)" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldWorkWhenColletionContainsSpecifiedElement" time="0.0000102" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldWorkWhenColletionContainsSpecifiedElement&lt;Single&gt;(col: [23,5, 23,6], element: 23,5)" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldWorkWhenColletionContainsSpecifiedElement" time="0.0002625" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldWorkWhenColletionContainsSpecifiedElement&lt;String&gt;(col: [\&quot;12\&quot;, \&quot;13\&quot;], element: \&quot;12\&quot;)" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldWorkWhenColletionContainsSpecifiedElement" time="0.000388" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldThrowExceptionWhenNonEmptyColletionIsGivenToIsEmpty&lt;Int32&gt;(nonEmptyCollectio: [12])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldThrowExceptionWhenNonEmptyColletionIsGivenToIsEmpty" time="0.0003919" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldThrowExceptionWhenNonEmptyColletionIsGivenToIsEmpty&lt;Single&gt;(nonEmptyCollectio: [23,5])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldThrowExceptionWhenNonEmptyColletionIsGivenToIsEmpty" time="0.0003595" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldThrowExceptionWhenNonEmptyColletionIsGivenToIsEmpty&lt;String&gt;(nonEmptyCollectio: [\&quot;12\&quot;])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldThrowExceptionWhenNonEmptyColletionIsGivenToIsEmpty" time="0.0004893" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureColletionTests.ShouldThrowExceptionWhenNonEmptyColletionIsGivenToIsEmpty&lt;Object&gt;(nonEmptyCollectio: [\&quot;12\&quot;])" type="Ensure.Core.Ensure.Tests.EnsureColletionTests" method="ShouldThrowExceptionWhenNonEmptyColletionIsGivenToIsEmpty" time="0.0001118" result="Pass" />
    </collection>
    <collection total="52" passed="52" failed="0" skipped="0" name="Test collection for Ensure.Core.Ensure.Tests.EnsureNumberTests" time="0.019">
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNonPositive(testValue: 1)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNonPositive" time="0.0105334" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNonPositive(testValue: 2,23)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNonPositive" time="0.0001063" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNonPositive(testValue: 0,5)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNonPositive" time="0.0000691" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNonPositive(testValue: 1E-05)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNonPositive" time="0.000068" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNonPositive(testValue: 15,4499998092651)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNonPositive" time="0.0000659" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsPositive(testValue: 0)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsPositive" time="0.0009251" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsPositive(testValue: -1)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsPositive" time="0.0000751" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsPositive(testValue: -0,5)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsPositive" time="0.0000692" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsPositive(testValue: -1E-05)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsPositive" time="0.0000937" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsPositive(testValue: -15,4499998092651)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsPositive" time="0.0000898" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldAlwaysWork" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldAlwaysWork" time="0.0002052" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsOdd(testValue: 0)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsOdd" time="0.0022076" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsOdd(testValue: 2)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsOdd" time="0.000076" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsOdd(testValue: 4)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsOdd" time="0.0000708" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsOdd(testValue: -2)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsOdd" time="0.0000634" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsOdd(testValue: -4)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsOdd" time="0.000062" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldWorkWhenGoodValueIsPassedToIsNegative(testValue: -1)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldWorkWhenGoodValueIsPassedToIsNegative" time="0.000536" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldWorkWhenGoodValueIsPassedToIsNegative(testValue: -2,23)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldWorkWhenGoodValueIsPassedToIsNegative" time="0.0000112" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldWorkWhenGoodValueIsPassedToIsNegative(testValue: -0,5)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldWorkWhenGoodValueIsPassedToIsNegative" time="0.0000039" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldWorkWhenGoodValueIsPassedToIsNegative(testValue: -1E-05)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldWorkWhenGoodValueIsPassedToIsNegative" time="0.0000048" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldWorkWhenGoodValueIsPassedToIsNegative(testValue: -15,4499998092651)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldWorkWhenGoodValueIsPassedToIsNegative" time="0.0000035" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNegative(testValue: 1)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNegative" time="0.0008623" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNegative(testValue: 2,23)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNegative" time="0.000066" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNegative(testValue: 0,5)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNegative" time="0.0000727" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNegative(testValue: 1E-05)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNegative" time="0.0000692" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNegative(testValue: 15,4499998092651)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNegative" time="0.0000671" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldWorkWhenGoodValueIsPassedToIsNonPositive(testValue: 0)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldWorkWhenGoodValueIsPassedToIsNonPositive" time="0.0002761" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldWorkWhenGoodValueIsPassedToIsNonPositive(testValue: -1)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldWorkWhenGoodValueIsPassedToIsNonPositive" time="0.0000115" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldWorkWhenGoodValueIsPassedToIsNonPositive(testValue: -2,23)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldWorkWhenGoodValueIsPassedToIsNonPositive" time="0.0000055" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldWorkWhenGoodValueIsPassedToIsNonPositive(testValue: -0,5)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldWorkWhenGoodValueIsPassedToIsNonPositive" time="0.0000039" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldWorkWhenGoodValueIsPassedToIsNonPositive(testValue: -1E-05)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldWorkWhenGoodValueIsPassedToIsNonPositive" time="0.0000033" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldWorkWhenGoodValueIsPassedToIsNonPositive(testValue: -15,4499998092651)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldWorkWhenGoodValueIsPassedToIsNonPositive" time="0.0000045" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldWorkWhenGoodValueIsPassedToIsPositive(value: 1)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldWorkWhenGoodValueIsPassedToIsPositive" time="0.0003946" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldWorkWhenGoodValueIsPassedToIsPositive(value: 2,23)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldWorkWhenGoodValueIsPassedToIsPositive" time="0.0000103" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldWorkWhenGoodValueIsPassedToIsPositive(value: 0,5)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldWorkWhenGoodValueIsPassedToIsPositive" time="0.0000048" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldWorkWhenGoodValueIsPassedToIsPositive(value: 1E-05)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldWorkWhenGoodValueIsPassedToIsPositive" time="0.0000036" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldWorkWhenGoodValueIsPassedToIsPositive(value: 15,4499998092651)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldWorkWhenGoodValueIsPassedToIsPositive" time="0.0000035" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNonNegative(testValue: -1)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNonNegative" time="0.0006337" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNonNegative(testValue: -2,23)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNonNegative" time="0.0000712" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNonNegative(testValue: -0,5)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNonNegative" time="0.0000719" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNonNegative(testValue: -1E-05)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNonNegative" time="0.0000695" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNonNegative(testValue: -15,4499998092651)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNonNegative" time="0.0000678" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldWorkWhenGoodValueIsPassedToIsNonNegative(testValue: 0)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldWorkWhenGoodValueIsPassedToIsNonNegative" time="0.0003684" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldWorkWhenGoodValueIsPassedToIsNonNegative(testValue: 1)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldWorkWhenGoodValueIsPassedToIsNonNegative" time="0.0000093" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldWorkWhenGoodValueIsPassedToIsNonNegative(testValue: 2,23)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldWorkWhenGoodValueIsPassedToIsNonNegative" time="0.0000046" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldWorkWhenGoodValueIsPassedToIsNonNegative(testValue: 0,5)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldWorkWhenGoodValueIsPassedToIsNonNegative" time="0.0000039" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldWorkWhenGoodValueIsPassedToIsNonNegative(testValue: 1E-05)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldWorkWhenGoodValueIsPassedToIsNonNegative" time="0.0000038" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldWorkWhenGoodValueIsPassedToIsNonNegative(testValue: 15,4499998092651)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldWorkWhenGoodValueIsPassedToIsNonNegative" time="0.0000145" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsEven(testValue: 1)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsEven" time="0.000534" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsEven(testValue: 3)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsEven" time="0.000068" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsEven(testValue: -1)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsEven" time="0.0000564" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumberTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsEven(testValue: -3)" type="Ensure.Core.Ensure.Tests.EnsureNumberTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsEven" time="0.0000541" result="Pass" />
    </collection>
    <collection total="27" passed="27" failed="0" skipped="0" name="Test collection for Ensure.Core.Ensure.Tests.EnsureNumbersTests" time="0.018">
      <test name="Ensure.Core.Ensure.Tests.EnsureNumbersTests.ShouldThrowExceptionWhenWrongValueWasPassedToAreNegative(values: [0, 1, 2, 3])" type="Ensure.Core.Ensure.Tests.EnsureNumbersTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToAreNegative" time="0.010452" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumbersTests.ShouldThrowExceptionWhenWrongValueWasPassedToAreNegative(values: [0, 1, 2,54, 3,20000004768372])" type="Ensure.Core.Ensure.Tests.EnsureNumbersTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToAreNegative" time="0.0000987" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumbersTests.ShouldThrowExceptionWhenWrongValueWasPassedToAreNegative(values: [1, 2,54, 3,20000004768372])" type="Ensure.Core.Ensure.Tests.EnsureNumbersTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToAreNegative" time="0.0000531" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumbersTests.ShouldWorkWhenGoodValueIsPassedToArePositive(values: [1, 2, 3])" type="Ensure.Core.Ensure.Tests.EnsureNumbersTests" method="ShouldWorkWhenGoodValueIsPassedToArePositive" time="0.0015872" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumbersTests.ShouldWorkWhenGoodValueIsPassedToArePositive(values: [1, 2,54, 3,20000004768372])" type="Ensure.Core.Ensure.Tests.EnsureNumbersTests" method="ShouldWorkWhenGoodValueIsPassedToArePositive" time="0.0000106" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumbersTests.ShouldWorkWhenGoodValueIsPassedToAreNonNegative(values: [0, 1, 2, 3])" type="Ensure.Core.Ensure.Tests.EnsureNumbersTests" method="ShouldWorkWhenGoodValueIsPassedToAreNonNegative" time="0.0010629" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumbersTests.ShouldWorkWhenGoodValueIsPassedToAreNonNegative(values: [0, 1, 2,54, 3,20000004768372])" type="Ensure.Core.Ensure.Tests.EnsureNumbersTests" method="ShouldWorkWhenGoodValueIsPassedToAreNonNegative" time="0.0000081" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumbersTests.ShouldWorkWhenGoodValueIsPassedToAreNonNegative(values: [1, 2,54, 3,20000004768372])" type="Ensure.Core.Ensure.Tests.EnsureNumbersTests" method="ShouldWorkWhenGoodValueIsPassedToAreNonNegative" time="0.0000038" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumbersTests.ShouldThrowExceptionWhenWrongValueWasPassedToAreNonNegative(values: [-1, -2, -3])" type="Ensure.Core.Ensure.Tests.EnsureNumbersTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToAreNonNegative" time="0.0007357" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumbersTests.ShouldThrowExceptionWhenWrongValueWasPassedToAreNonNegative(values: [-1, -2,54, -3,20000004768372])" type="Ensure.Core.Ensure.Tests.EnsureNumbersTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToAreNonNegative" time="0.0000582" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumbersTests.ShouldThrowExceptionWhenWrongValueWasPassedToAreNonPositive(values: [1, 2, 3])" type="Ensure.Core.Ensure.Tests.EnsureNumbersTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToAreNonPositive" time="0.0006552" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumbersTests.ShouldThrowExceptionWhenWrongValueWasPassedToAreNonPositive(values: [1, 2,54, 3,20000004768372])" type="Ensure.Core.Ensure.Tests.EnsureNumbersTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToAreNonPositive" time="0.0000619" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumbersTests.ShouldThrowExceptionWhenWrongValueWasPassedToArePositive(values: [0, -1, -2, -3])" type="Ensure.Core.Ensure.Tests.EnsureNumbersTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToArePositive" time="0.0006801" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumbersTests.ShouldThrowExceptionWhenWrongValueWasPassedToArePositive(values: [0, -1, -2,54, -3,20000004768372])" type="Ensure.Core.Ensure.Tests.EnsureNumbersTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToArePositive" time="0.0000769" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumbersTests.ShouldThrowExceptionWhenWrongValueWasPassedToArePositive(values: [-1, -2,54, -3,20000004768372])" type="Ensure.Core.Ensure.Tests.EnsureNumbersTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToArePositive" time="0.0000511" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumbersTests.ShouldWorkWhenGoodValueIsPassedToAreNegative(values: [-1, -2, -3])" type="Ensure.Core.Ensure.Tests.EnsureNumbersTests" method="ShouldWorkWhenGoodValueIsPassedToAreNegative" time="0.0003541" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumbersTests.ShouldWorkWhenGoodValueIsPassedToAreNegative(values: [-1, -2,54, -3,20000004768372])" type="Ensure.Core.Ensure.Tests.EnsureNumbersTests" method="ShouldWorkWhenGoodValueIsPassedToAreNegative" time="0.0000088" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumbersTests.ShouldAlwaysWork" type="Ensure.Core.Ensure.Tests.EnsureNumbersTests" method="ShouldAlwaysWork" time="0.0000925" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumbersTests.ShouldThrowExceptionWhenWrongValueWasPassedToAreEven(values: [1, 3, 7])" type="Ensure.Core.Ensure.Tests.EnsureNumbersTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToAreEven" time="0.0011424" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumbersTests.ShouldThrowExceptionWhenWrongValueWasPassedToAreEven(values: [-1, -3, -7])" type="Ensure.Core.Ensure.Tests.EnsureNumbersTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToAreEven" time="0.0000518" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumbersTests.ShouldThrowExceptionWhenWrongValueWasPassedToAreEven(values: [1, -3, 7])" type="Ensure.Core.Ensure.Tests.EnsureNumbersTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToAreEven" time="0.000043" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumbersTests.ShouldWorkWhenGoodValueIsPassedToAreNonPositive(values: [0, -1, -2, -3])" type="Ensure.Core.Ensure.Tests.EnsureNumbersTests" method="ShouldWorkWhenGoodValueIsPassedToAreNonPositive" time="0.0003674" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumbersTests.ShouldWorkWhenGoodValueIsPassedToAreNonPositive(values: [0, -1, -2,54, -3,20000004768372])" type="Ensure.Core.Ensure.Tests.EnsureNumbersTests" method="ShouldWorkWhenGoodValueIsPassedToAreNonPositive" time="0.000009" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumbersTests.ShouldWorkWhenGoodValueIsPassedToAreNonPositive(values: [-1, -2,54, -3,20000004768372])" type="Ensure.Core.Ensure.Tests.EnsureNumbersTests" method="ShouldWorkWhenGoodValueIsPassedToAreNonPositive" time="0.0000029" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumbersTests.ShouldThrowExceptionWhenWrongValueWasPassedToAreOdd(values: [0, 2, 6])" type="Ensure.Core.Ensure.Tests.EnsureNumbersTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToAreOdd" time="0.0005681" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumbersTests.ShouldThrowExceptionWhenWrongValueWasPassedToAreOdd(values: [2, -6, 4])" type="Ensure.Core.Ensure.Tests.EnsureNumbersTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToAreOdd" time="0.0000502" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureNumbersTests.ShouldThrowExceptionWhenWrongValueWasPassedToAreOdd(values: [-2, -4, -6])" type="Ensure.Core.Ensure.Tests.EnsureNumbersTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToAreOdd" time="0.0000429" result="Pass" />
    </collection>
    <collection total="9" passed="9" failed="0" skipped="0" name="Test collection for Ensure.Core.Ensure.Tests.EnsureStringTests" time="0.015">
      <test name="Ensure.Core.Ensure.Tests.EnsureStringTests.ShouldThrowExceptionWhenNullStringIsPassedToIsEmpty(testValue: \&quot;12\&quot;)" type="Ensure.Core.Ensure.Tests.EnsureStringTests" method="ShouldThrowExceptionWhenNullStringIsPassedToIsEmpty" time="0.010511" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureStringTests.ShouldThrowExceptionWhenNullStringIsPassedToIsNotNullOrEmpty(testValue: null)" type="Ensure.Core.Ensure.Tests.EnsureStringTests" method="ShouldThrowExceptionWhenNullStringIsPassedToIsNotNullOrEmpty" time="0.001585" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureStringTests.ShouldThrowExceptionWhenNullStringIsPassedToIsNotNullOrEmpty(testValue: \&quot;\&quot;)" type="Ensure.Core.Ensure.Tests.EnsureStringTests" method="ShouldThrowExceptionWhenNullStringIsPassedToIsNotNullOrEmpty" time="0.0000742" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureStringTests.ShouldWorkWhenGoodValueIsPassedToIsNotNullOrEmpty(testValue: \&quot;12\&quot;)" type="Ensure.Core.Ensure.Tests.EnsureStringTests" method="ShouldWorkWhenGoodValueIsPassedToIsNotNullOrEmpty" time="0.0005656" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureStringTests.ShouldWorkWhenGoodValueIsPassedToIsNotNullOrEmpty(testValue: \&quot;   \&quot;)" type="Ensure.Core.Ensure.Tests.EnsureStringTests" method="ShouldWorkWhenGoodValueIsPassedToIsNotNullOrEmpty" time="0.0000093" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureStringTests.ShouldWorkWhenGoodValueIsPassedToIsEmpty(testValue: \&quot;\&quot;)" type="Ensure.Core.Ensure.Tests.EnsureStringTests" method="ShouldWorkWhenGoodValueIsPassedToIsEmpty" time="0.0005245" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureStringTests.ShouldThrowExceptionWhenNullStringIsPassedToIsNull(testValue: \&quot;\&quot;)" type="Ensure.Core.Ensure.Tests.EnsureStringTests" method="ShouldThrowExceptionWhenNullStringIsPassedToIsNull" time="0.0014373" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureStringTests.ShouldThrowExceptionWhenNullStringIsPassedToIsNull(testValue: \&quot;12\&quot;)" type="Ensure.Core.Ensure.Tests.EnsureStringTests" method="ShouldThrowExceptionWhenNullStringIsPassedToIsNull" time="0.0000664" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureStringTests.ShouldWorkWhenGoodValueIsPassedToIsNull(testValue: null)" type="Ensure.Core.Ensure.Tests.EnsureStringTests" method="ShouldWorkWhenGoodValueIsPassedToIsNull" time="0.0002791" result="Pass" />
    </collection>
    <collection total="76" passed="76" failed="0" skipped="0" name="Test collection for Ensure.Core.Ensure.Tests.EnsureTests" time="0.031">
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenNullValueIsPassedToIsNotNull" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenNullValueIsPassedToIsNotNull" time="0.0105366" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNegative(testValue: 1)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNegative" time="0.0016353" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNegative(testValue: 2,23)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNegative" time="0.0000901" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNegative(testValue: 0,5)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNegative" time="0.0000684" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNegative(testValue: 1E-05)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNegative" time="0.0000686" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNegative(testValue: 15,4499998092651)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNegative" time="0.0000687" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNonNegative(testValue: -1)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNonNegative" time="0.0013604" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNonNegative(testValue: -2,23)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNonNegative" time="0.000068" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNonNegative(testValue: -0,5)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNonNegative" time="0.0000663" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNonNegative(testValue: -1E-05)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNonNegative" time="0.0000763" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNonNegative(testValue: -15,4499998092651)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNonNegative" time="0.0000684" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenNotExistingFileWasPassedToFileExists(wrongPath: \&quot;notexistingpath/notexistingfile\&quot;)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenNotExistingFileWasPassedToFileExists" time="0.0014717" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenNotExistingFileWasPassedToFileExists(wrongPath: \&quot;\&quot;)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenNotExistingFileWasPassedToFileExists" time="0.0000748" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenNotExistingFileWasPassedToFileExists(wrongPath: \&quot;12\&quot;)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenNotExistingFileWasPassedToFileExists" time="0.0000789" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenNotExistingFileWasPassedToFileExists(wrongPath: null)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenNotExistingFileWasPassedToFileExists" time="0.0000671" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNonPositive(testValue: 1)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNonPositive" time="0.0013885" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNonPositive(testValue: 2,23)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNonPositive" time="0.000081" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNonPositive(testValue: 0,5)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNonPositive" time="0.0000634" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNonPositive(testValue: 1E-05)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNonPositive" time="0.0000496" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsNonPositive(testValue: 15,4499998092651)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsNonPositive" time="0.0000452" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenGoodValueIsPassedToIsNotNull(testValue: [])" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenGoodValueIsPassedToIsNotNull" time="0.0002728" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenGoodValueIsPassedToIsNotNull(testValue: 15)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenGoodValueIsPassedToIsNotNull" time="0.0000072" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenGoodValueIsPassedToIsNotNull(testValue: Object { })" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenGoodValueIsPassedToIsNotNull" time="0.0000027" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenGoodValueIsPassedToIsNotNull(testValue: [])" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenGoodValueIsPassedToIsNotNull" time="0.0000025" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldAlwaysWork" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldAlwaysWork" time="0.0000492" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenGoodValueIsPassedToIsNonNegative(testValue: 0)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenGoodValueIsPassedToIsNonNegative" time="0.000326" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenGoodValueIsPassedToIsNonNegative(testValue: 1)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenGoodValueIsPassedToIsNonNegative" time="0.0000083" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenGoodValueIsPassedToIsNonNegative(testValue: 2,23)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenGoodValueIsPassedToIsNonNegative" time="0.0000025" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenGoodValueIsPassedToIsNonNegative(testValue: 0,5)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenGoodValueIsPassedToIsNonNegative" time="0.0000022" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenGoodValueIsPassedToIsNonNegative(testValue: 1E-05)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenGoodValueIsPassedToIsNonNegative" time="0.0000022" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenGoodValueIsPassedToIsNonNegative(testValue: 15,4499998092651)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenGoodValueIsPassedToIsNonNegative" time="0.0000022" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldTWorkWhenCustomConditionIsSatisfied&lt;Double&gt;(condition: Func`2 { Method = Boolean &lt;get_GetCustomPassedChecks&gt;b__9_0(Double), Target = &lt;&gt;c { } }, value: 10)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldTWorkWhenCustomConditionIsSatisfied" time="0.0004432" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldTWorkWhenCustomConditionIsSatisfied&lt;Double&gt;(condition: Func`2 { Method = Boolean &lt;get_GetCustomPassedChecks&gt;b__9_1(Double), Target = &lt;&gt;c { } }, value: 10,53)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldTWorkWhenCustomConditionIsSatisfied" time="0.0000553" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldTWorkWhenCustomConditionIsSatisfied&lt;String&gt;(condition: Func`2 { Method = Boolean &lt;get_GetCustomPassedChecks&gt;b__9_2(System.String), Target = &lt;&gt;c { } }, value: \&quot;12\&quot;)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldTWorkWhenCustomConditionIsSatisfied" time="0.0007112" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldTWorkWhenCustomConditionIsSatisfied&lt;String&gt;(condition: Func`2 { Method = Boolean &lt;get_GetCustomPassedChecks&gt;b__9_3(System.String), Target = &lt;&gt;c { } }, value: \&quot;   \&quot;)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldTWorkWhenCustomConditionIsSatisfied" time="0.0000807" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenGoodValueIsPassedToIsNonPositive(testValue: 0)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenGoodValueIsPassedToIsNonPositive" time="0.0002649" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenGoodValueIsPassedToIsNonPositive(testValue: -1)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenGoodValueIsPassedToIsNonPositive" time="0.0000084" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenGoodValueIsPassedToIsNonPositive(testValue: -2,23)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenGoodValueIsPassedToIsNonPositive" time="0.0000028" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenGoodValueIsPassedToIsNonPositive(testValue: -0,5)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenGoodValueIsPassedToIsNonPositive" time="0.0000023" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenGoodValueIsPassedToIsNonPositive(testValue: -1E-05)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenGoodValueIsPassedToIsNonPositive" time="0.0000023" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenGoodValueIsPassedToIsNonPositive(testValue: -15,4499998092651)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenGoodValueIsPassedToIsNonPositive" time="0.0000023" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenGoodValueIsPassedToIsNotNullOrEmpty(testValue: \&quot;12\&quot;)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenGoodValueIsPassedToIsNotNullOrEmpty" time="0.0004569" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenGoodValueIsPassedToIsNotNullOrEmpty(testValue: \&quot;   \&quot;)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenGoodValueIsPassedToIsNotNullOrEmpty" time="0.0000094" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenGoodValueIsPassedToIsPositive(value: 1)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenGoodValueIsPassedToIsPositive" time="0.0005397" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenGoodValueIsPassedToIsPositive(value: 2,23)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenGoodValueIsPassedToIsPositive" time="0.0000095" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenGoodValueIsPassedToIsPositive(value: 0,5)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenGoodValueIsPassedToIsPositive" time="0.0000025" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenGoodValueIsPassedToIsPositive(value: 1E-05)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenGoodValueIsPassedToIsPositive" time="0.0000023" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenGoodValueIsPassedToIsPositive(value: 15,4499998092651)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenGoodValueIsPassedToIsPositive" time="0.0000024" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenCustomConditionIsNotSatisfied&lt;Double&gt;(condition: Func`2 { Method = Boolean &lt;get_GetCustomFailedChecks&gt;b__7_0(Double), Target = &lt;&gt;c { } }, value: -1)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenCustomConditionIsNotSatisfied" time="0.0005877" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenCustomConditionIsNotSatisfied&lt;Double&gt;(condition: Func`2 { Method = Boolean &lt;get_GetCustomFailedChecks&gt;b__7_1(Double), Target = &lt;&gt;c { } }, value: 0)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenCustomConditionIsNotSatisfied" time="0.0001189" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenCustomConditionIsNotSatisfied&lt;String&gt;(condition: Func`2 { Method = Boolean &lt;get_GetCustomFailedChecks&gt;b__7_2(System.String), Target = &lt;&gt;c { } }, value: null)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenCustomConditionIsNotSatisfied" time="0.0006413" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenCustomConditionIsNotSatisfied&lt;String&gt;(condition: Func`2 { Method = Boolean &lt;get_GetCustomFailedChecks&gt;b__7_3(System.String), Target = &lt;&gt;c { } }, value: \&quot;\&quot;)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenCustomConditionIsNotSatisfied" time="0.000112" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsPositive(testValue: 0)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsPositive" time="0.0004097" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsPositive(testValue: -1)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsPositive" time="0.0000488" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsPositive(testValue: -0,5)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsPositive" time="0.000044" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsPositive(testValue: -1E-05)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsPositive" time="0.0000426" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenWrongValueWasPassedToIsPositive(testValue: -15,4499998092651)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenWrongValueWasPassedToIsPositive" time="0.0000428" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenNonEmptyColletionIsGivenToIsEmpty&lt;Int32&gt;(nonEmptyCollectio: [12])" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenNonEmptyColletionIsGivenToIsEmpty" time="0.000986" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenNonEmptyColletionIsGivenToIsEmpty&lt;Single&gt;(nonEmptyCollectio: [23,5])" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenNonEmptyColletionIsGivenToIsEmpty" time="0.0007716" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenNonEmptyColletionIsGivenToIsEmpty&lt;String&gt;(nonEmptyCollectio: [\&quot;12\&quot;])" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenNonEmptyColletionIsGivenToIsEmpty" time="0.0011605" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenNonEmptyColletionIsGivenToIsEmpty&lt;Object&gt;(nonEmptyCollectio: [\&quot;12\&quot;])" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenNonEmptyColletionIsGivenToIsEmpty" time="0.0001458" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenGoodValueIsPassedToIsNegative(testValue: -1)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenGoodValueIsPassedToIsNegative" time="0.0002508" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenGoodValueIsPassedToIsNegative(testValue: -2,23)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenGoodValueIsPassedToIsNegative" time="0.0000082" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenGoodValueIsPassedToIsNegative(testValue: -0,5)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenGoodValueIsPassedToIsNegative" time="0.0000025" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenGoodValueIsPassedToIsNegative(testValue: -1E-05)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenGoodValueIsPassedToIsNegative" time="0.0000023" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenGoodValueIsPassedToIsNegative(testValue: -15,4499998092651)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenGoodValueIsPassedToIsNegative" time="0.0000022" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenNonEmptyCollectionIsGivenToIsNotEmpty&lt;Int32&gt;(nonEmptyCollection: [12])" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenNonEmptyCollectionIsGivenToIsNotEmpty" time="0.0007054" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenNonEmptyCollectionIsGivenToIsNotEmpty&lt;Single&gt;(nonEmptyCollection: [23,5])" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenNonEmptyCollectionIsGivenToIsNotEmpty" time="0.0007227" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenNonEmptyCollectionIsGivenToIsNotEmpty&lt;String&gt;(nonEmptyCollection: [\&quot;12\&quot;])" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenNonEmptyCollectionIsGivenToIsNotEmpty" time="0.0009278" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldWorkWhenNonEmptyCollectionIsGivenToIsNotEmpty&lt;Object&gt;(nonEmptyCollection: [\&quot;12\&quot;])" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldWorkWhenNonEmptyCollectionIsGivenToIsNotEmpty" time="0.000103" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenEmptyCollectionIsGivenToIsNotEmpty&lt;Int32&gt;(emptyCollection: [])" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenEmptyCollectionIsGivenToIsNotEmpty" time="0.0004472" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenEmptyCollectionIsGivenToIsNotEmpty&lt;Single&gt;(emptyCollection: [])" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenEmptyCollectionIsGivenToIsNotEmpty" time="0.0003979" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenEmptyCollectionIsGivenToIsNotEmpty&lt;String&gt;(emptyCollection: [])" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenEmptyCollectionIsGivenToIsNotEmpty" time="0.0005813" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenEmptyCollectionIsGivenToIsNotEmpty&lt;Object&gt;(emptyCollection: [])" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenEmptyCollectionIsGivenToIsNotEmpty" time="0.000114" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenNullStringIsPassedToIsNotNullOrEmpty(testValue: null)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenNullStringIsPassedToIsNotNullOrEmpty" time="0.0004102" result="Pass" />
      <test name="Ensure.Core.Ensure.Tests.EnsureTests.ShouldThrowExceptionWhenNullStringIsPassedToIsNotNullOrEmpty(testValue: \&quot;\&quot;)" type="Ensure.Core.Ensure.Tests.EnsureTests" method="ShouldThrowExceptionWhenNullStringIsPassedToIsNotNullOrEmpty" time="0.0000458" result="Pass" />
    </collection>
  </assembly>
</assemblies>